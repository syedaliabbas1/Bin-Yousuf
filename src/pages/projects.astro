---
// src/pages/projects.astro - Optimized version with performance improvements
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.tsx';
import ProjectsList from '../components/ProjectsList.tsx';
import ProjectsSlideshow from '../components/Slideshow.tsx';
import { projects } from '../data/projects.js';

const currentPath = Astro.url.pathname;

// Group projects by location
const emaarProjects = projects.filter(p => p.location === 'Emaar');
const hmrProjects = projects.filter(p => p.location === 'HMR');

// Use import.meta.glob instead of Astro.glob
const slideshowImageImports = import.meta.glob('../assets/projects/slideshow/*.{webp,jpg,jpeg,png}', { eager: true });
const slideshowImages = Object.values(slideshowImageImports);

// Format and optimize images for the slideshow component
const formattedSlideshowImages = slideshowImages
  .slice(0, 5) // Limit to 5 images for better performance
  .map((img: any, index: number) => ({
    src: img.default.src || img.default,
    alt: `Project Slideshow Image ${index + 1}`
  }));
---

<Layout title="Projects - BYG">
  <Navigation currentPath={currentPath} client:load />
  
  <section class="w-full mt-20">
    <ProjectsSlideshow 
      images={formattedSlideshowImages}
      autoPlayInterval={3000}
      showDots={true}
      showArrows={false}
      height="60vh"
      client:visible
    />
  </section>
  
  <main class="pt-0">
    <ProjectsList 
      projects={projects}
      emaarProjects={emaarProjects}
      hmrProjects={hmrProjects}
      client:idle
    />
  </main>
</Layout>

<style>
  /* Critical CSS only */
  html {
    scroll-behavior: auto;
  }
  
  main {
    min-height: 100vh;
    contain: layout style paint;
  }
  
  /* Preload optimization */
  .slideshow-container {
    contain: layout style paint;
    content-visibility: auto;
  }
  
  /* Performance optimizations */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

<script lang="ts" is:inline>
  // Optimized script with performance improvements
  if (typeof window !== 'undefined') {
    // Defer non-critical operations
    requestIdleCallback(() => {
      // Clean up any existing scroll listeners from main.ts
      const existingHandlers = (window as any).__scrollHandlers || [];
      existingHandlers.forEach((handler: EventListener) => {
        window.removeEventListener('scroll', handler);
      });
      (window as any).__scrollHandlers = [];
      
      // Mark this page as projects page to prevent main.ts initialization
      (window as any).__isProjectsPage = true;
    });
    
    // Optimize scroll performance
    let scrollTimeout: number; // Use 'number' for browser environments
    window.addEventListener('scroll', () => {
      // Add scrolling class for performance optimizations
      document.body.classList.add('is-scrolling');
      
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        document.body.classList.remove('is-scrolling');
      }, 150);
    }, { passive: true });
  }
</script>